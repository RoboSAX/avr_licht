
tmp/out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000804  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000878  2**0
                  ALLOC
  3 .stab         00001d58  00000000  00000000  00000878  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000139b  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000396b  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000397c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	90 c0       	rjmp	.+288    	; 0x122 <__ctors_end>
   2:	00 00       	nop
   4:	9e c0       	rjmp	.+316    	; 0x142 <__bad_interrupt>
   6:	00 00       	nop
   8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
   a:	00 00       	nop
   c:	9a c0       	rjmp	.+308    	; 0x142 <__bad_interrupt>
   e:	00 00       	nop
  10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
  12:	00 00       	nop
  14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
  16:	00 00       	nop
  18:	94 c0       	rjmp	.+296    	; 0x142 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
  1e:	00 00       	nop
  20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
  22:	00 00       	nop
  24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>
  26:	00 00       	nop
  28:	8c c0       	rjmp	.+280    	; 0x142 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8a c0       	rjmp	.+276    	; 0x142 <__bad_interrupt>
  2e:	00 00       	nop
  30:	88 c0       	rjmp	.+272    	; 0x142 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__bad_interrupt>
  36:	00 00       	nop
  38:	84 c0       	rjmp	.+264    	; 0x142 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	82 c0       	rjmp	.+260    	; 0x142 <__bad_interrupt>
  3e:	00 00       	nop
  40:	80 c0       	rjmp	.+256    	; 0x142 <__bad_interrupt>
  42:	00 00       	nop
  44:	7e c0       	rjmp	.+252    	; 0x142 <__bad_interrupt>
  46:	00 00       	nop
  48:	7c c0       	rjmp	.+248    	; 0x142 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7a c0       	rjmp	.+244    	; 0x142 <__bad_interrupt>
  4e:	00 00       	nop
  50:	78 c0       	rjmp	.+240    	; 0x142 <__bad_interrupt>
  52:	00 00       	nop
  54:	76 c0       	rjmp	.+236    	; 0x142 <__bad_interrupt>
  56:	00 00       	nop
  58:	74 c0       	rjmp	.+232    	; 0x142 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	72 c0       	rjmp	.+228    	; 0x142 <__bad_interrupt>
  5e:	00 00       	nop
  60:	70 c0       	rjmp	.+224    	; 0x142 <__bad_interrupt>
  62:	00 00       	nop
  64:	6e c0       	rjmp	.+220    	; 0x142 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
  68:	0d 0a       	sbc	r0, r29
	...

0000006b <__c.1746>:
  6b:	0d 0a 00                                            ...

0000006e <__c.1744>:
  6e:	31 30 30 30 30 30 30 00                             1000000.

00000076 <__c.1742>:
  76:	3a 20 00                                            : .

00000079 <__c.1740>:
  79:	20 20 46 5f 43 50 55 00                               F_CPU.

00000081 <__c.1738>:
  81:	72 6f 62 6f 6c 69 62 2f 64 65 6c 61 79 2f 64 65     robolib/delay/de
  91:	6c 61 79 2e 63 20 32 37 2e 30 39 2e 32 30 31 35     lay.c 27.09.2015
  a1:	20 56 31 2e 30 2e 30 0d 0a 00                        V1.0.0...

000000ab <__c.1732>:
  ab:	0d 0a 00                                            ...

000000ae <__c.1730>:
  ae:	20 20 5b 65 6d 70 74 79 5d 0d 0a 00                   [empty]...

000000ba <__c.1728>:
  ba:	64 65 6c 61 79 3a 0d 0a 00                          delay:...

000000c3 <__c.1840>:
  c3:	0d 0a 00                                            ...

000000c6 <__c.1838>:
  c6:	20 20 5b 65 6d 70 74 79 5d 0d 0a 00                   [empty]...

000000d2 <__c.1836>:
  d2:	72 6f 62 6f 6c 69 62 2f 73 74 72 69 6e 67 2f 73     robolib/string/s
  e2:	74 72 69 6e 67 2e 63 20 30 35 2e 31 30 2e 32 30     tring.c 05.10.20
  f2:	31 35 20 56 31 2e 31 2e 30 0d 0a 00                 15 V1.1.0...

000000fe <__c.1830>:
  fe:	0d 0a 00                                            ...

00000101 <__c.1828>:
 101:	20 20 5b 65 6d 70 74 79 5d 0d 0a 00                   [empty]...

0000010d <__c.1826>:
 10d:	73 74 72 69 6e 67 3a 0d 0a 00                       string:...

00000117 <__c.1787>:
 117:	66 61 6c 73 65 00                                   false.

0000011d <__c.1785>:
 11d:	74 72 75 65 00                                      true.

00000122 <__ctors_end>:
 122:	11 24       	eor	r1, r1
 124:	1f be       	out	0x3f, r1	; 63
 126:	cf ef       	ldi	r28, 0xFF	; 255
 128:	d8 e0       	ldi	r29, 0x08	; 8
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	cd bf       	out	0x3d, r28	; 61

0000012e <__do_clear_bss>:
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	a0 e0       	ldi	r26, 0x00	; 0
 132:	b1 e0       	ldi	r27, 0x01	; 1
 134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
 136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
 138:	a9 30       	cpi	r26, 0x09	; 9
 13a:	b2 07       	cpc	r27, r18
 13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>
 13e:	04 d3       	rcall	.+1544   	; 0x748 <main>
 140:	5f c3       	rjmp	.+1726   	; 0x800 <_exit>

00000142 <__bad_interrupt>:
 142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <init_hardware>:

//**************************[init_hardware]************************************
void init_hardware(void) {

    // set leds to output
    DDRB = _BV(1) | _BV(2) | _BV(3);
 144:	8e e0       	ldi	r24, 0x0E	; 14
 146:	84 b9       	out	0x04, r24	; 4
    DDRC = _BV(0) | _BV(1) | _BV(2);
 148:	87 e0       	ldi	r24, 0x07	; 7
 14a:	87 b9       	out	0x07, r24	; 7
    DDRD = _BV(3) | _BV(5);
 14c:	88 e2       	ldi	r24, 0x28	; 40
 14e:	8a b9       	out	0x0a, r24	; 10

    // set buttons to input, set to pull-up
    DDRC &= ~_BV(3);
 150:	3b 98       	cbi	0x07, 3	; 7
  //  PORTC |= _BV(3);
  //  PORTB |= _BV(0);

    // set big button to input, set to pull-up
    DDRD &= ~_BV(4);
 152:	54 98       	cbi	0x0a, 4	; 10
  //  PORTD |= _BV(4);

    buttons.big = 0;
 154:	e0 e0       	ldi	r30, 0x00	; 0
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	10 82       	st	Z, r1
    buttons.one = 0;
 15a:	11 82       	std	Z+1, r1	; 0x01
    buttons.two = 0;
 15c:	12 82       	std	Z+2, r1	; 0x02
 15e:	08 95       	ret

00000160 <led_clearAll>:
//**************************[led_clearAll]********************************************
void led_clearAll(void) {

    // schaltet alle LEDs aus
    // LED von beiden Teams starten in jedem Modus im ausgeschalteten Zustand
    led1_setRed(0);
 160:	29 98       	cbi	0x05, 1	; 5
    led1_setGreen(0);
 162:	2a 98       	cbi	0x05, 2	; 5
    led1_setBlue(0);
 164:	5d 98       	cbi	0x0b, 5	; 11
    led1_setIr(0);
 166:	5b 98       	cbi	0x0b, 3	; 11

    led2_setRed(0);
 168:	40 98       	cbi	0x08, 0	; 8
    led2_setGreen(0);
 16a:	41 98       	cbi	0x08, 1	; 8
    led2_setBlue(0);
 16c:	42 98       	cbi	0x08, 2	; 8
    led2_setIr(0);
 16e:	2b 98       	cbi	0x05, 3	; 5
 170:	08 95       	ret

00000172 <get_buttonState>:

}

//**************************[get_buttonState]**********************************
void get_buttonState(void) {
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
    _Bool big_old = buttons.big; _Bool one_old = buttons.one; _Bool two_old = buttons.two;
 178:	10 91 00 01 	lds	r17, 0x0100	; 0x800100 <_edata>
 17c:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <_edata+0x1>
 180:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <_edata+0x2>

    buttons.big = button_getBtnmode();
 184:	29 b1       	in	r18, 0x09	; 9
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	22 95       	swap	r18
 18a:	21 70       	andi	r18, 0x01	; 1
 18c:	28 27       	eor	r18, r24
 18e:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
    buttons.one = button_getBtn1();
 192:	93 b1       	in	r25, 0x03	; 3
 194:	91 70       	andi	r25, 0x01	; 1
 196:	98 27       	eor	r25, r24
 198:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
    buttons.two = button_getBtn2();
 19c:	36 b1       	in	r19, 0x06	; 6
 19e:	33 fb       	bst	r19, 3
 1a0:	33 27       	eor	r19, r19
 1a2:	30 f9       	bld	r19, 0
 1a4:	83 27       	eor	r24, r19
 1a6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>

    if(buttons.big != big_old || buttons.one != one_old || buttons.two != two_old || buttons.big_flank_down || buttons.big_flank_up || buttons.one_flank_down || buttons.one_flank_up || buttons.two_flank_down || buttons.two_flank_up){
 1aa:	21 13       	cpse	r18, r17
 1ac:	1d c0       	rjmp	.+58     	; 0x1e8 <get_buttonState+0x76>
 1ae:	9d 13       	cpse	r25, r29
 1b0:	1b c0       	rjmp	.+54     	; 0x1e8 <get_buttonState+0x76>
 1b2:	8c 13       	cpse	r24, r28
 1b4:	19 c0       	rjmp	.+50     	; 0x1e8 <get_buttonState+0x76>
 1b6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_edata+0x6>
 1ba:	81 11       	cpse	r24, r1
 1bc:	15 c0       	rjmp	.+42     	; 0x1e8 <get_buttonState+0x76>
 1be:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_edata+0x3>
 1c2:	81 11       	cpse	r24, r1
 1c4:	11 c0       	rjmp	.+34     	; 0x1e8 <get_buttonState+0x76>
 1c6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_edata+0x7>
 1ca:	81 11       	cpse	r24, r1
 1cc:	0d c0       	rjmp	.+26     	; 0x1e8 <get_buttonState+0x76>
 1ce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_edata+0x4>
 1d2:	81 11       	cpse	r24, r1
 1d4:	09 c0       	rjmp	.+18     	; 0x1e8 <get_buttonState+0x76>
 1d6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_edata+0x8>
 1da:	81 11       	cpse	r24, r1
 1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <get_buttonState+0x76>
 1de:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_edata+0x5>
 1e2:	88 23       	and	r24, r24
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <get_buttonState+0x76>
 1e6:	57 c0       	rjmp	.+174    	; 0x296 <get_buttonState+0x124>
        delay_ms(30);
 1e8:	8e e1       	ldi	r24, 0x1E	; 30
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	03 d1       	rcall	.+518    	; 0x3f4 <delay_ms>
        if(button_getBtnmode() && buttons.big && !big_old)
 1ee:	4c 99       	sbic	0x09, 4	; 9
 1f0:	0a c0       	rjmp	.+20     	; 0x206 <get_buttonState+0x94>
 1f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1f6:	88 23       	and	r24, r24
 1f8:	31 f0       	breq	.+12     	; 0x206 <get_buttonState+0x94>
 1fa:	11 11       	cpse	r17, r1
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <get_buttonState+0x94>
            buttons.big_flank_up = 1;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_edata+0x3>
 204:	02 c0       	rjmp	.+4      	; 0x20a <get_buttonState+0x98>
        else buttons.big_flank_up = 0;
 206:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>

        if(!button_getBtnmode() && !buttons.big && big_old)
 20a:	4c 9b       	sbis	0x09, 4	; 9
 20c:	0a c0       	rjmp	.+20     	; 0x222 <get_buttonState+0xb0>
 20e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 212:	81 11       	cpse	r24, r1
 214:	06 c0       	rjmp	.+12     	; 0x222 <get_buttonState+0xb0>
 216:	11 23       	and	r17, r17
 218:	21 f0       	breq	.+8      	; 0x222 <get_buttonState+0xb0>
            buttons.big_flank_down = 1;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_edata+0x6>
 220:	02 c0       	rjmp	.+4      	; 0x226 <get_buttonState+0xb4>
        else buttons.big_flank_down = 0;
 222:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_edata+0x6>

        if(button_getBtn1() && buttons.one && !one_old)
 226:	18 99       	sbic	0x03, 0	; 3
 228:	0a c0       	rjmp	.+20     	; 0x23e <get_buttonState+0xcc>
 22a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
 22e:	88 23       	and	r24, r24
 230:	31 f0       	breq	.+12     	; 0x23e <get_buttonState+0xcc>
 232:	d1 11       	cpse	r29, r1
 234:	04 c0       	rjmp	.+8      	; 0x23e <get_buttonState+0xcc>
            buttons.one_flank_up = 1;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_edata+0x4>
 23c:	02 c0       	rjmp	.+4      	; 0x242 <get_buttonState+0xd0>
        else buttons.one_flank_up = 0;
 23e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <_edata+0x4>

        if(!button_getBtn1() && !buttons.one && one_old)
 242:	18 9b       	sbis	0x03, 0	; 3
 244:	0a c0       	rjmp	.+20     	; 0x25a <get_buttonState+0xe8>
 246:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
 24a:	81 11       	cpse	r24, r1
 24c:	06 c0       	rjmp	.+12     	; 0x25a <get_buttonState+0xe8>
 24e:	dd 23       	and	r29, r29
 250:	21 f0       	breq	.+8      	; 0x25a <get_buttonState+0xe8>
            buttons.one_flank_down= 1;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_edata+0x7>
 258:	02 c0       	rjmp	.+4      	; 0x25e <get_buttonState+0xec>
        else buttons.one_flank_down = 0;
 25a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_edata+0x7>

        if(button_getBtn2() && buttons.two && !two_old)
 25e:	33 99       	sbic	0x06, 3	; 6
 260:	0a c0       	rjmp	.+20     	; 0x276 <get_buttonState+0x104>
 262:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 266:	88 23       	and	r24, r24
 268:	31 f0       	breq	.+12     	; 0x276 <get_buttonState+0x104>
 26a:	c1 11       	cpse	r28, r1
 26c:	04 c0       	rjmp	.+8      	; 0x276 <get_buttonState+0x104>
            buttons.two_flank_up = 1;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_edata+0x5>
 274:	02 c0       	rjmp	.+4      	; 0x27a <get_buttonState+0x108>
        else buttons.two_flank_up = 0;
 276:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <_edata+0x5>

        if(!button_getBtn2() && !buttons.two && two_old)
 27a:	33 9b       	sbis	0x06, 3	; 6
 27c:	0a c0       	rjmp	.+20     	; 0x292 <get_buttonState+0x120>
 27e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 282:	81 11       	cpse	r24, r1
 284:	06 c0       	rjmp	.+12     	; 0x292 <get_buttonState+0x120>
 286:	cc 23       	and	r28, r28
 288:	21 f0       	breq	.+8      	; 0x292 <get_buttonState+0x120>
            buttons.two_flank_down= 1;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_edata+0x8>
 290:	02 c0       	rjmp	.+4      	; 0x296 <get_buttonState+0x124>
        else buttons.two_flank_down = 0;
 292:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_edata+0x8>
    }

}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	08 95       	ret

0000029e <modus_1>:
    return (0);

}

//**************************[modus_1]*********************************************
void modus_1(uint8_t *error_team1, uint8_t *error_team2) {
 29e:	dc 01       	movw	r26, r24
 2a0:	fb 01       	movw	r30, r22

//***Team1*************************
    if (buttons.one_flank_up) {
 2a2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_edata+0x4>
 2a6:	88 23       	and	r24, r24
 2a8:	69 f0       	breq	.+26     	; 0x2c4 <modus_1+0x26>
        //wenn Knopf gedrückt wird, obwohl Teamlicht (blau) schon an ist -> Fehler
        if (led1_readBlue()) {
 2aa:	5d 9b       	sbis	0x0b, 5	; 11
 2ac:	09 c0       	rjmp	.+18     	; 0x2c0 <modus_1+0x22>
            *error_team1+=1;
 2ae:	9c 91       	ld	r25, X
 2b0:	9f 5f       	subi	r25, 0xFF	; 255
 2b2:	9c 93       	st	X, r25
            if (*error_team1>=3) {
 2b4:	93 30       	cpi	r25, 0x03	; 3
 2b6:	30 f0       	brcs	.+12     	; 0x2c4 <modus_1+0x26>
            //bei 3 Fehlern: eigenes Licht geht aus, das vom Gegner (grün) an
                led1_setBlue(0);
 2b8:	5d 98       	cbi	0x0b, 5	; 11
                led2_setGreen(1);
 2ba:	41 9a       	sbi	0x08, 1	; 8
                *error_team1=0;
 2bc:	1c 92       	st	X, r1
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <modus_1+0x26>
            }
        }
        //Teamlicht anschalten, wenn vorher aus
        else {
            led1_setBlue(1);
 2c0:	5d 9a       	sbi	0x0b, 5	; 11
            led2_setGreen(0);
 2c2:	41 98       	cbi	0x08, 1	; 8
        }
    }

//***Team2*************************
    if (buttons.two_flank_up) {
 2c4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_edata+0x5>
 2c8:	88 23       	and	r24, r24
 2ca:	69 f0       	breq	.+26     	; 0x2e6 <modus_1+0x48>
        //wenn Knopf gedrückt wird, obwohl Teamlicht (grün) schon an ist -> Fehler
        if (led2_readGreen()) {
 2cc:	41 9b       	sbis	0x08, 1	; 8
 2ce:	09 c0       	rjmp	.+18     	; 0x2e2 <modus_1+0x44>
            *error_team2+=1;
 2d0:	80 81       	ld	r24, Z
 2d2:	8f 5f       	subi	r24, 0xFF	; 255
 2d4:	80 83       	st	Z, r24
            if (*error_team2>=3) {
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	30 f0       	brcs	.+12     	; 0x2e6 <modus_1+0x48>
            //bei 3 Fehlern: eigenes Licht geht aus, das vom Gegner (blau) an
                led1_setBlue(1);
 2da:	5d 9a       	sbi	0x0b, 5	; 11
                led2_setGreen(0);
 2dc:	41 98       	cbi	0x08, 1	; 8
                *error_team2=0;
 2de:	10 82       	st	Z, r1
 2e0:	08 95       	ret
            }
        }
        //Teamlicht anschalten, wenn vorher aus
        else {
            led1_setBlue(0);
 2e2:	5d 98       	cbi	0x0b, 5	; 11
            led2_setGreen(1);
 2e4:	41 9a       	sbi	0x08, 1	; 8
 2e6:	08 95       	ret

000002e8 <modus_2>:
}

//**************************[modus_2]*********************************************
void modus_2() {
    //mit Zuständen arbeiten
    if (buttons.one_flank_up) {
 2e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_edata+0x4>
 2ec:	88 23       	and	r24, r24
 2ee:	11 f0       	breq	.+4      	; 0x2f4 <modus_2+0xc>
        led1_setGreen(1);
 2f0:	2a 9a       	sbi	0x05, 2	; 5
        led2_setGreen(0);
 2f2:	41 98       	cbi	0x08, 1	; 8
    }
    if (buttons.two_flank_up) {
 2f4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_edata+0x5>
 2f8:	88 23       	and	r24, r24
 2fa:	11 f0       	breq	.+4      	; 0x300 <modus_2+0x18>
        led1_setGreen(0);
 2fc:	2a 98       	cbi	0x05, 2	; 5
        led2_setGreen(1);
 2fe:	41 9a       	sbi	0x08, 1	; 8
 300:	08 95       	ret

00000302 <modus_3>:
    }
}

//**************************[modus_3]*********************************************
//unabhängige Lichter mit Fehlerzähler
void modus_3(uint8_t *error_team1, uint8_t *error_team2) {
 302:	dc 01       	movw	r26, r24
 304:	fb 01       	movw	r30, r22

//***Team1*************************
    if (buttons.one_flank_up) {
 306:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_edata+0x4>
 30a:	88 23       	and	r24, r24
 30c:	59 f0       	breq	.+22     	; 0x324 <modus_3+0x22>
        //wenn Knopf gedrückt wird, obwohl Teamlicht (blau) schon an ist -> Fehler
        if (led1_readBlue()) {
 30e:	5d 9b       	sbis	0x0b, 5	; 11
 310:	08 c0       	rjmp	.+16     	; 0x322 <modus_3+0x20>
            *error_team1+=1;
 312:	9c 91       	ld	r25, X
 314:	9f 5f       	subi	r25, 0xFF	; 255
 316:	9c 93       	st	X, r25
            if (*error_team1>=3) {
 318:	93 30       	cpi	r25, 0x03	; 3
 31a:	20 f0       	brcs	.+8      	; 0x324 <modus_3+0x22>
            //bei 3 Fehlern: eigenes Licht geht aus, das vom Gegner (grün) an
                led1_setBlue(0);
 31c:	5d 98       	cbi	0x0b, 5	; 11
                *error_team1=0;
 31e:	1c 92       	st	X, r1
 320:	01 c0       	rjmp	.+2      	; 0x324 <modus_3+0x22>
            }
        }
        //Teamlicht anschalten, wenn vorher aus
        else {
            led1_setBlue(1);
 322:	5d 9a       	sbi	0x0b, 5	; 11
        }
    }

//***Team2*************************
    if (buttons.two_flank_up) {
 324:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_edata+0x5>
 328:	88 23       	and	r24, r24
 32a:	59 f0       	breq	.+22     	; 0x342 <modus_3+0x40>
        //wenn Knopf gedrückt wird, obwohl Teamlicht (grün) schon an ist -> Fehler
        if (led2_readBlue()) {
 32c:	42 9b       	sbis	0x08, 2	; 8
 32e:	08 c0       	rjmp	.+16     	; 0x340 <modus_3+0x3e>
            *error_team2+=1;
 330:	80 81       	ld	r24, Z
 332:	8f 5f       	subi	r24, 0xFF	; 255
 334:	80 83       	st	Z, r24
            if (*error_team2>=3) {
 336:	83 30       	cpi	r24, 0x03	; 3
 338:	20 f0       	brcs	.+8      	; 0x342 <modus_3+0x40>
            //bei 3 Fehlern: eigenes Licht geht aus, das vom Gegner (blau) an
                led2_setBlue(0);
 33a:	42 98       	cbi	0x08, 2	; 8
                *error_team2=0;
 33c:	10 82       	st	Z, r1
 33e:	08 95       	ret
            }
        }
        //Teamlicht anschalten, wenn vorher aus
        else {
            led2_setBlue(1);
 340:	42 9a       	sbi	0x08, 2	; 8
 342:	08 95       	ret

00000344 <blink_multicolored_alternating>:
}

void blink_multicolored_alternating() {


    led1_setGreen(1);    led1_setRed(1);
 344:	2a 9a       	sbi	0x05, 2	; 5
 346:	29 9a       	sbi	0x05, 1	; 5
    delay_ms(200);
 348:	88 ec       	ldi	r24, 0xC8	; 200
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	53 d0       	rcall	.+166    	; 0x3f4 <delay_ms>
    led_clearAll();
 34e:	08 df       	rcall	.-496    	; 0x160 <led_clearAll>
    led2_setGreen(1);    led2_setRed(1);
 350:	41 9a       	sbi	0x08, 1	; 8
 352:	40 9a       	sbi	0x08, 0	; 8
    delay_ms(200);
 354:	88 ec       	ldi	r24, 0xC8	; 200
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	4d d0       	rcall	.+154    	; 0x3f4 <delay_ms>
    led_clearAll();
 35a:	02 df       	rcall	.-508    	; 0x160 <led_clearAll>
    led1_setGreen(1);    led1_setRed(1);
 35c:	2a 9a       	sbi	0x05, 2	; 5
 35e:	29 9a       	sbi	0x05, 1	; 5
    delay_ms(200);
 360:	88 ec       	ldi	r24, 0xC8	; 200
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	47 d0       	rcall	.+142    	; 0x3f4 <delay_ms>
    led_clearAll();
 366:	fc de       	rcall	.-520    	; 0x160 <led_clearAll>
    led2_setGreen(1);    led2_setRed(1);
 368:	41 9a       	sbi	0x08, 1	; 8
 36a:	40 9a       	sbi	0x08, 0	; 8
    delay_ms(200);
 36c:	88 ec       	ldi	r24, 0xC8	; 200
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	41 d0       	rcall	.+130    	; 0x3f4 <delay_ms>
    led_clearAll();
 372:	f6 de       	rcall	.-532    	; 0x160 <led_clearAll>
    led1_setGreen(1);    led1_setRed(1);
 374:	2a 9a       	sbi	0x05, 2	; 5
 376:	29 9a       	sbi	0x05, 1	; 5
    delay_ms(200);
 378:	88 ec       	ldi	r24, 0xC8	; 200
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	3b d0       	rcall	.+118    	; 0x3f4 <delay_ms>
    led_clearAll();
 37e:	f0 de       	rcall	.-544    	; 0x160 <led_clearAll>
    led2_setGreen(1);    led2_setRed(1);
 380:	41 9a       	sbi	0x08, 1	; 8
 382:	40 9a       	sbi	0x08, 0	; 8
    delay_ms(200);
 384:	88 ec       	ldi	r24, 0xC8	; 200
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	35 d0       	rcall	.+106    	; 0x3f4 <delay_ms>
    led_clearAll();
 38a:	ea ce       	rjmp	.-556    	; 0x160 <led_clearAll>

0000038c <blink_green_alternating>:


}

void blink_green_alternating(){
    led1_setGreen(1);
 38c:	2a 9a       	sbi	0x05, 2	; 5
    delay_ms(200);
 38e:	88 ec       	ldi	r24, 0xC8	; 200
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	30 d0       	rcall	.+96     	; 0x3f4 <delay_ms>
    led_clearAll();
 394:	e5 de       	rcall	.-566    	; 0x160 <led_clearAll>
    led2_setGreen(1);
 396:	41 9a       	sbi	0x08, 1	; 8
    delay_ms(200);
 398:	88 ec       	ldi	r24, 0xC8	; 200
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	2b d0       	rcall	.+86     	; 0x3f4 <delay_ms>
    led_clearAll();
 39e:	e0 de       	rcall	.-576    	; 0x160 <led_clearAll>

    led1_setGreen(1);
 3a0:	2a 9a       	sbi	0x05, 2	; 5
    delay_ms(200);
 3a2:	88 ec       	ldi	r24, 0xC8	; 200
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	26 d0       	rcall	.+76     	; 0x3f4 <delay_ms>
    led_clearAll();
 3a8:	db de       	rcall	.-586    	; 0x160 <led_clearAll>
    led2_setGreen(1);
 3aa:	41 9a       	sbi	0x08, 1	; 8
    delay_ms(200);
 3ac:	88 ec       	ldi	r24, 0xC8	; 200
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	21 d0       	rcall	.+66     	; 0x3f4 <delay_ms>
    led_clearAll();
 3b2:	d6 de       	rcall	.-596    	; 0x160 <led_clearAll>

    led1_setGreen(1);
 3b4:	2a 9a       	sbi	0x05, 2	; 5
    delay_ms(200);
 3b6:	88 ec       	ldi	r24, 0xC8	; 200
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	1c d0       	rcall	.+56     	; 0x3f4 <delay_ms>
    led_clearAll();
 3bc:	d1 de       	rcall	.-606    	; 0x160 <led_clearAll>
    led2_setGreen(1);
 3be:	41 9a       	sbi	0x08, 1	; 8
    delay_ms(200);
 3c0:	88 ec       	ldi	r24, 0xC8	; 200
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	17 c0       	rjmp	.+46     	; 0x3f4 <delay_ms>

000003c6 <blink_multicolored>:

}

void blink_multicolored() {
    led1_setBlue(1);
 3c6:	5d 9a       	sbi	0x0b, 5	; 11
    led2_setBlue(1);
 3c8:	42 9a       	sbi	0x08, 2	; 8
    delay_ms(200);
 3ca:	88 ec       	ldi	r24, 0xC8	; 200
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	12 d0       	rcall	.+36     	; 0x3f4 <delay_ms>

    led_clearAll();
 3d0:	c7 de       	rcall	.-626    	; 0x160 <led_clearAll>
    delay_ms(200);
 3d2:	88 ec       	ldi	r24, 0xC8	; 200
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e d0       	rcall	.+28     	; 0x3f4 <delay_ms>

    led1_setBlue(1);
 3d8:	5d 9a       	sbi	0x0b, 5	; 11
    led2_setBlue(1);
 3da:	42 9a       	sbi	0x08, 2	; 8
    delay_ms(200);
 3dc:	88 ec       	ldi	r24, 0xC8	; 200
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	09 d0       	rcall	.+18     	; 0x3f4 <delay_ms>

    led_clearAll();
 3e2:	be de       	rcall	.-644    	; 0x160 <led_clearAll>
    delay_ms(200);
 3e4:	88 ec       	ldi	r24, 0xC8	; 200
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	05 d0       	rcall	.+10     	; 0x3f4 <delay_ms>

    led1_setBlue(1);
 3ea:	5d 9a       	sbi	0x0b, 5	; 11
    led2_setBlue(1);
 3ec:	42 9a       	sbi	0x08, 2	; 8
    delay_ms(200);
 3ee:	88 ec       	ldi	r24, 0xC8	; 200
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <delay_ms>

000003f4 <delay_ms>:
        uint16_t a;
    #else // if (((F_CPU + 4000) / 8000) > 255)
        uint8_t a;
    #endif // if (((F_CPU + 4000) / 8000) > 255)

    while (mseconds) {
 3f4:	00 97       	sbiw	r24, 0x00	; 0
 3f6:	51 f0       	breq	.+20     	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 3f8:	2d e7       	ldi	r18, 0x7D	; 125
	...
            for (a = (uint8_t) ((F_CPU + 4000) / 8000); a; a--) {
                nop();
                nop();
                nop();
                nop();
                nop();
 402:	00 00       	nop
 404:	21 50       	subi	r18, 0x01	; 1
                nop();
                nop();
                nop();
            }
        #else // if (((F_CPU + 4000) / 8000) > 255)
            for (a = (uint8_t) ((F_CPU + 4000) / 8000); a; a--) {
 406:	c9 f7       	brne	.-14     	; 0x3fa <delay_ms+0x6>
                nop();
                nop();
                nop();
            }
        #endif // if (((F_CPU + 4000) / 8000) > 255)
        mseconds--;
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f4 cf       	rjmp	.-24     	; 0x3f4 <delay_ms>
    }
}
 40c:	08 95       	ret

0000040e <loopdelay>:
   Copyright (c) 2002, Marek Michalkiewicz
   Copyright (c) 2007 Joerg Wunsch
*/
__inline__ void loopdelay(uint8_t __count) {
    // waits for (__count * 3 - 1) cylces
    __asm__ volatile (
 40e:	8a 95       	dec	r24
 410:	f1 f7       	brne	.-4      	; 0x40e <loopdelay>
 412:	08 95       	ret

00000414 <delay_us>:
            // while-schleife dauert 4 Takte
            loopdelay((F_CPU - 350000) / 300000);
            useconds--;
        }
    #else // if (((F_CPU - 350000) / 300000) > 5)
        while (useconds) {
 414:	00 97       	sbiw	r24, 0x00	; 0
 416:	49 f0       	breq	.+18     	; 0x42a <delay_us+0x16>
	...
            #endif
            #if ((((F_CPU - 350000) / 100000) & 0x02) == 0x02)
                nop(); nop();
            #endif
            #if ((((F_CPU - 350000) / 100000) & 0x04) == 0x04)
                nop(); nop(); nop(); nop();
 424:	00 00       	nop
            #endif
            #if ((((F_CPU - 350000) / 100000) & 0x08) == 0x08)
                nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop();
            #endif
            useconds--;
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f5 cf       	rjmp	.-22     	; 0x414 <delay_us>
        }
    #endif
}
 42a:	08 95       	ret

0000042c <robolib_delay_print>:
//**************************[robolib_delay_print]******************************* 27.09.2015
void robolib_delay_print(void (*out)(uint8_t)) {
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	ec 01       	movw	r28, r24

    string_from_const(out, "delay:"                                    "\r\n");
 432:	6a eb       	ldi	r22, 0xBA	; 186
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	26 d1       	rcall	.+588    	; 0x684 <string_from_flash>

    string_from_const(out, "  [empty]"                                 "\r\n");
 438:	6e ea       	ldi	r22, 0xAE	; 174
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	ce 01       	movw	r24, r28
 43e:	22 d1       	rcall	.+580    	; 0x684 <string_from_flash>

    string_from_const(out,                                             "\r\n");
 440:	6b ea       	ldi	r22, 0xAB	; 171
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	ce 01       	movw	r24, r28
}
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28

    string_from_const(out, "delay:"                                    "\r\n");

    string_from_const(out, "  [empty]"                                 "\r\n");

    string_from_const(out,                                             "\r\n");
 44a:	1c c1       	rjmp	.+568    	; 0x684 <string_from_flash>

0000044c <robolib_delay_print_compiled>:
}

//**************************[robolib_delay_print_compiled]********************** 27.09.2015
void robolib_delay_print_compiled(void (*out)(uint8_t)) {
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	ec 01       	movw	r28, r24

    string_from_const(out, ROBOLIB_DELAY_VERSION                        "\r\n");
 452:	61 e8       	ldi	r22, 0x81	; 129
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	16 d1       	rcall	.+556    	; 0x684 <string_from_flash>

    string_from_const_length(out, "  F_CPU", 15); string_from_const(out, ": ");
 458:	4f e0       	ldi	r20, 0x0F	; 15
 45a:	69 e7       	ldi	r22, 0x79	; 121
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	ce 01       	movw	r24, r28
 460:	2d d1       	rcall	.+602    	; 0x6bc <string_from_flash_length>
 462:	66 e7       	ldi	r22, 0x76	; 118
 464:	70 e0       	ldi	r23, 0x00	; 0
 466:	ce 01       	movw	r24, r28
 468:	0d d1       	rcall	.+538    	; 0x684 <string_from_flash>
    string_from_macro(out, F_CPU);              string_from_const(out, "\r\n");
 46a:	6e e6       	ldi	r22, 0x6E	; 110
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	ce 01       	movw	r24, r28
 470:	09 d1       	rcall	.+530    	; 0x684 <string_from_flash>
 472:	6b e6       	ldi	r22, 0x6B	; 107
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	ce 01       	movw	r24, r28
 478:	05 d1       	rcall	.+522    	; 0x684 <string_from_flash>

    string_from_const(out,                                             "\r\n");
 47a:	68 e6       	ldi	r22, 0x68	; 104
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	ce 01       	movw	r24, r28
}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
    string_from_const(out, ROBOLIB_DELAY_VERSION                        "\r\n");

    string_from_const_length(out, "  F_CPU", 15); string_from_const(out, ": ");
    string_from_macro(out, F_CPU);              string_from_const(out, "\r\n");

    string_from_const(out,                                             "\r\n");
 484:	ff c0       	rjmp	.+510    	; 0x684 <string_from_flash>

00000486 <string_from_uint>:
//**************************<Renaming>*****************************************

//**************************<Files>********************************************

//**************************[string_from_uint]********************************* 27.09.2015
void string_from_uint(void (*out)(uint8_t), uint16_t number, uint8_t digits) {
 486:	ef 92       	push	r14
 488:	ff 92       	push	r15
 48a:	1f 93       	push	r17
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	00 d0       	rcall	.+0      	; 0x492 <string_from_uint+0xc>
 492:	00 d0       	rcall	.+0      	; 0x494 <string_from_uint+0xe>
 494:	00 d0       	rcall	.+0      	; 0x496 <string_from_uint+0x10>
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	7c 01       	movw	r14, r24
 49c:	cb 01       	movw	r24, r22
 49e:	41 32       	cpi	r20, 0x21	; 33
 4a0:	08 f0       	brcs	.+2      	; 0x4a4 <string_from_uint+0x1e>
 4a2:	40 e2       	ldi	r20, 0x20	; 32
 4a4:	20 e0       	ldi	r18, 0x00	; 0
    pos = 0;
    if (digits > 32) {digits = 32;}

    // calculate digits
    do {
        temp_str[pos++] = (number % 10) + 48;
 4a6:	ea e0       	ldi	r30, 0x0A	; 10
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	11 e0       	ldi	r17, 0x01	; 1
 4ac:	12 0f       	add	r17, r18
 4ae:	61 e0       	ldi	r22, 0x01	; 1
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	6c 0f       	add	r22, r28
 4b4:	7d 1f       	adc	r23, r29
 4b6:	62 0f       	add	r22, r18
 4b8:	71 1d       	adc	r23, r1
 4ba:	9b 01       	movw	r18, r22
 4bc:	bf 01       	movw	r22, r30
 4be:	8c d1       	rcall	.+792    	; 0x7d8 <__udivmodhi4>
 4c0:	90 e3       	ldi	r25, 0x30	; 48
 4c2:	98 0f       	add	r25, r24
 4c4:	d9 01       	movw	r26, r18
 4c6:	9c 93       	st	X, r25
        number/= 10;
 4c8:	cb 01       	movw	r24, r22
    pos = 0;
    if (digits > 32) {digits = 32;}

    // calculate digits
    do {
        temp_str[pos++] = (number % 10) + 48;
 4ca:	21 2f       	mov	r18, r17
        number/= 10;
    } while (number);
 4cc:	00 97       	sbiw	r24, 0x00	; 0
 4ce:	69 f7       	brne	.-38     	; 0x4aa <string_from_uint+0x24>

    // pad with spaces if necessary
    while (digits > pos) {out(32); digits--;}
 4d0:	14 17       	cp	r17, r20
 4d2:	38 f4       	brcc	.+14     	; 0x4e2 <string_from_uint+0x5c>
 4d4:	80 e2       	ldi	r24, 0x20	; 32
 4d6:	4e 83       	std	Y+6, r20	; 0x06
 4d8:	f7 01       	movw	r30, r14
 4da:	09 95       	icall
 4dc:	4e 81       	ldd	r20, Y+6	; 0x06
 4de:	41 50       	subi	r20, 0x01	; 1
 4e0:	f7 cf       	rjmp	.-18     	; 0x4d0 <string_from_uint+0x4a>
 4e2:	11 50       	subi	r17, 0x01	; 1
 4e4:	50 f0       	brcs	.+20     	; 0x4fa <string_from_uint+0x74>

    // write digits
    while (pos--) {
        out(temp_str[pos]);
 4e6:	e1 e0       	ldi	r30, 0x01	; 1
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	ec 0f       	add	r30, r28
 4ec:	fd 1f       	adc	r31, r29
 4ee:	e1 0f       	add	r30, r17
 4f0:	f1 1d       	adc	r31, r1
 4f2:	80 81       	ld	r24, Z
 4f4:	f7 01       	movw	r30, r14
 4f6:	09 95       	icall
 4f8:	f4 cf       	rjmp	.-24     	; 0x4e2 <string_from_uint+0x5c>
    }
}
 4fa:	26 96       	adiw	r28, 0x06	; 6
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	f8 94       	cli
 500:	de bf       	out	0x3e, r29	; 62
 502:	0f be       	out	0x3f, r0	; 63
 504:	cd bf       	out	0x3d, r28	; 61
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	1f 91       	pop	r17
 50c:	ff 90       	pop	r15
 50e:	ef 90       	pop	r14
 510:	08 95       	ret

00000512 <string_from_int>:

//**************************[string_from_int]********************************** 27.09.2015
void string_from_int(void (*out)(uint8_t), int16_t number, uint8_t digits) {
 512:	0f 93       	push	r16
 514:	1f 93       	push	r17
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
 51a:	00 d0       	rcall	.+0      	; 0x51c <string_from_int+0xa>
 51c:	1f 92       	push	r1
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
 522:	8c 01       	movw	r16, r24

    // check if number is negativ
    if (number < 0) {
 524:	77 ff       	sbrs	r23, 7
 526:	13 c0       	rjmp	.+38     	; 0x54e <string_from_int+0x3c>
        number = -number;
 528:	71 95       	neg	r23
 52a:	61 95       	neg	r22
 52c:	71 09       	sbc	r23, r1
        out('-');
 52e:	8d e2       	ldi	r24, 0x2D	; 45
 530:	4b 83       	std	Y+3, r20	; 0x03
 532:	69 83       	std	Y+1, r22	; 0x01
 534:	7a 83       	std	Y+2, r23	; 0x02
 536:	f8 01       	movw	r30, r16
 538:	09 95       	icall
        if (digits > 32) {digits = 32;}
 53a:	4b 81       	ldd	r20, Y+3	; 0x03
 53c:	69 81       	ldd	r22, Y+1	; 0x01
 53e:	7a 81       	ldd	r23, Y+2	; 0x02
 540:	41 32       	cpi	r20, 0x21	; 33
 542:	18 f4       	brcc	.+6      	; 0x54a <string_from_int+0x38>
        if (digits     ) {digits--;   }
 544:	44 23       	and	r20, r20
 546:	19 f0       	breq	.+6      	; 0x54e <string_from_int+0x3c>
 548:	01 c0       	rjmp	.+2      	; 0x54c <string_from_int+0x3a>

    // check if number is negativ
    if (number < 0) {
        number = -number;
        out('-');
        if (digits > 32) {digits = 32;}
 54a:	40 e2       	ldi	r20, 0x20	; 32
        if (digits     ) {digits--;   }
 54c:	41 50       	subi	r20, 0x01	; 1
    }
    string_from_uint(out, (uint16_t) number,digits);
 54e:	c8 01       	movw	r24, r16
}
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	0f 90       	pop	r0
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	1f 91       	pop	r17
 55c:	0f 91       	pop	r16
        number = -number;
        out('-');
        if (digits > 32) {digits = 32;}
        if (digits     ) {digits--;   }
    }
    string_from_uint(out, (uint16_t) number,digits);
 55e:	93 cf       	rjmp	.-218    	; 0x486 <string_from_uint>

00000560 <string_from_hex>:
}

//**************************[string_from_hex]********************************** 27.09.2015
void string_from_hex(void (*out)(uint8_t), uint16_t number, int8_t digits) {
 560:	ef 92       	push	r14
 562:	ff 92       	push	r15
 564:	0f 93       	push	r16
 566:	1f 93       	push	r17
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	1f 92       	push	r1
 56e:	cd b7       	in	r28, 0x3d	; 61
 570:	de b7       	in	r29, 0x3e	; 62
 572:	7c 01       	movw	r14, r24
 574:	8b 01       	movw	r16, r22

    uint8_t temp_digit;
    // init
    if (digits < 0) {
 576:	47 ff       	sbrs	r20, 7
 578:	09 c0       	rjmp	.+18     	; 0x58c <string_from_hex+0x2c>
        digits = -digits;
 57a:	41 95       	neg	r20
        out('0');
 57c:	80 e3       	ldi	r24, 0x30	; 48
 57e:	49 83       	std	Y+1, r20	; 0x01
 580:	f7 01       	movw	r30, r14
 582:	09 95       	icall
        out('x');
 584:	88 e7       	ldi	r24, 0x78	; 120
 586:	f7 01       	movw	r30, r14
 588:	09 95       	icall
 58a:	49 81       	ldd	r20, Y+1	; 0x01
    }

    // calculate shift
    if (digits > 4) {
 58c:	45 30       	cpi	r20, 0x05	; 5
 58e:	4c f4       	brge	.+18     	; 0x5a2 <string_from_hex+0x42>
        digits = 0;
    } else {
        digits = (4 - digits) << 2;
 590:	24 e0       	ldi	r18, 0x04	; 4
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	24 1b       	sub	r18, r20
 596:	31 09       	sbc	r19, r1
 598:	47 fd       	sbrc	r20, 7
 59a:	33 95       	inc	r19
 59c:	22 0f       	add	r18, r18
 59e:	22 0f       	add	r18, r18
 5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <string_from_hex+0x44>
        out('x');
    }

    // calculate shift
    if (digits > 4) {
        digits = 0;
 5a2:	20 e0       	ldi	r18, 0x00	; 0
    } else {
        digits = (4 - digits) << 2;
    }

    // shift number
    number = number << digits;
 5a4:	02 2e       	mov	r0, r18
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <string_from_hex+0x4c>
 5a8:	00 0f       	add	r16, r16
 5aa:	11 1f       	adc	r17, r17
 5ac:	0a 94       	dec	r0
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <string_from_hex+0x48>

    // write digits
    while (digits < 16) {
 5b0:	20 31       	cpi	r18, 0x10	; 16
 5b2:	a4 f4       	brge	.+40     	; 0x5dc <string_from_hex+0x7c>
        temp_digit = (((union uint16) number).h >> 4);
 5b4:	91 2f       	mov	r25, r17
 5b6:	92 95       	swap	r25
 5b8:	9f 70       	andi	r25, 0x0F	; 15
        if (temp_digit < 10) {
 5ba:	9a 30       	cpi	r25, 0x0A	; 10
 5bc:	10 f4       	brcc	.+4      	; 0x5c2 <string_from_hex+0x62>
            temp_digit+= 48; // '0'
 5be:	80 e3       	ldi	r24, 0x30	; 48
 5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <string_from_hex+0x64>
        } else {
            temp_digit+= 55; // 'A' - 10
 5c2:	87 e3       	ldi	r24, 0x37	; 55
 5c4:	89 0f       	add	r24, r25
        }
        out(temp_digit);
 5c6:	29 83       	std	Y+1, r18	; 0x01
 5c8:	f7 01       	movw	r30, r14
 5ca:	09 95       	icall
        number = number << 4;
 5cc:	84 e0       	ldi	r24, 0x04	; 4
 5ce:	00 0f       	add	r16, r16
 5d0:	11 1f       	adc	r17, r17
 5d2:	8a 95       	dec	r24
 5d4:	e1 f7       	brne	.-8      	; 0x5ce <string_from_hex+0x6e>
 5d6:	29 81       	ldd	r18, Y+1	; 0x01
 5d8:	2c 5f       	subi	r18, 0xFC	; 252
 5da:	ea cf       	rjmp	.-44     	; 0x5b0 <string_from_hex+0x50>
        digits+= 4;
    }
}
 5dc:	0f 90       	pop	r0
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	ff 90       	pop	r15
 5e8:	ef 90       	pop	r14
 5ea:	08 95       	ret

000005ec <string_from_bits>:

//**************************[string_from_bits]********************************* 27.09.2015
void string_from_bits(void (*out)(uint8_t), uint16_t number, int8_t digits) {
 5ec:	df 92       	push	r13
 5ee:	ef 92       	push	r14
 5f0:	ff 92       	push	r15
 5f2:	0f 93       	push	r16
 5f4:	1f 93       	push	r17
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	1f 92       	push	r1
 5fc:	cd b7       	in	r28, 0x3d	; 61
 5fe:	de b7       	in	r29, 0x3e	; 62
 600:	7c 01       	movw	r14, r24
 602:	8b 01       	movw	r16, r22

    // init
    if (digits < 0) {
 604:	47 ff       	sbrs	r20, 7
 606:	09 c0       	rjmp	.+18     	; 0x61a <string_from_bits+0x2e>
        digits = -digits;
 608:	41 95       	neg	r20
        out('0');
 60a:	80 e3       	ldi	r24, 0x30	; 48
 60c:	49 83       	std	Y+1, r20	; 0x01
 60e:	f7 01       	movw	r30, r14
 610:	09 95       	icall
        out('b');
 612:	82 e6       	ldi	r24, 0x62	; 98
 614:	f7 01       	movw	r30, r14
 616:	09 95       	icall
 618:	49 81       	ldd	r20, Y+1	; 0x01
    }

    // calculate shift
    if (digits > 16) {
 61a:	41 31       	cpi	r20, 0x11	; 17
 61c:	24 f4       	brge	.+8      	; 0x626 <string_from_bits+0x3a>
        digits = 0;
    } else {
        digits = 16 - digits;
 61e:	80 e1       	ldi	r24, 0x10	; 16
 620:	d8 2e       	mov	r13, r24
 622:	d4 1a       	sub	r13, r20
 624:	01 c0       	rjmp	.+2      	; 0x628 <string_from_bits+0x3c>
        out('b');
    }

    // calculate shift
    if (digits > 16) {
        digits = 0;
 626:	d1 2c       	mov	r13, r1
    } else {
        digits = 16 - digits;
    }

    // shift number
    number = number << digits;
 628:	0d 2c       	mov	r0, r13
 62a:	02 c0       	rjmp	.+4      	; 0x630 <string_from_bits+0x44>
 62c:	00 0f       	add	r16, r16
 62e:	11 1f       	adc	r17, r17
 630:	0a 94       	dec	r0
 632:	e2 f7       	brpl	.-8      	; 0x62c <string_from_bits+0x40>

    // write digits
    while (digits < 16) {
 634:	ff e0       	ldi	r31, 0x0F	; 15
 636:	fd 15       	cp	r31, r13
 638:	5c f0       	brlt	.+22     	; 0x650 <string_from_bits+0x64>
        if (((union uint16) number).h & 0x80) {
 63a:	17 ff       	sbrs	r17, 7
 63c:	02 c0       	rjmp	.+4      	; 0x642 <string_from_bits+0x56>
            out('1');
 63e:	81 e3       	ldi	r24, 0x31	; 49
 640:	01 c0       	rjmp	.+2      	; 0x644 <string_from_bits+0x58>
        } else {
            out('0');
 642:	80 e3       	ldi	r24, 0x30	; 48
 644:	f7 01       	movw	r30, r14
 646:	09 95       	icall
        }
        number = number << 1;
 648:	00 0f       	add	r16, r16
 64a:	11 1f       	adc	r17, r17
 64c:	d3 94       	inc	r13
 64e:	f2 cf       	rjmp	.-28     	; 0x634 <string_from_bits+0x48>
        digits+= 1;
    }
}
 650:	0f 90       	pop	r0
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	1f 91       	pop	r17
 658:	0f 91       	pop	r16
 65a:	ff 90       	pop	r15
 65c:	ef 90       	pop	r14
 65e:	df 90       	pop	r13
 660:	08 95       	ret

00000662 <string_from_ram>:
        string_from_const(out,"false");
    }
}

//**************************[string_from_ram]********************************** 27.09.2015
void string_from_ram(void (*out)(uint8_t), const char *str) {
 662:	0f 93       	push	r16
 664:	1f 93       	push	r17
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	8c 01       	movw	r16, r24
 66c:	eb 01       	movw	r28, r22

    uint8_t temp_char;

    while (1) {
        temp_char = (uint8_t) *(str++);
 66e:	89 91       	ld	r24, Y+

        if (temp_char == 0) {
 670:	88 23       	and	r24, r24
 672:	19 f0       	breq	.+6      	; 0x67a <string_from_ram+0x18>
            return;
        }
        out(temp_char);
 674:	f8 01       	movw	r30, r16
 676:	09 95       	icall
    }
 678:	fa cf       	rjmp	.-12     	; 0x66e <string_from_ram+0xc>
}
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	1f 91       	pop	r17
 680:	0f 91       	pop	r16
 682:	08 95       	ret

00000684 <string_from_flash>:

//**************************[string_from_flash]******************************** 05.10.2015
void string_from_flash(void (*out)(uint8_t), const char *str) {
 684:	0f 93       	push	r16
 686:	1f 93       	push	r17
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	8c 01       	movw	r16, r24

    while (1) {
        #ifdef pgm_read_byte_far
            temp_char = pgm_read_byte_far (str++);
        #else
            temp_char = pgm_read_byte (str++);
 68e:	fb 01       	movw	r30, r22
 690:	84 91       	lpm	r24, Z
 692:	eb 01       	movw	r28, r22
 694:	21 96       	adiw	r28, 0x01	; 1
        #endif

        if (temp_char == 0) {
 696:	88 23       	and	r24, r24
 698:	21 f0       	breq	.+8      	; 0x6a2 <string_from_flash+0x1e>
            return;
        }
        out(temp_char);
 69a:	f8 01       	movw	r30, r16
 69c:	09 95       	icall
 69e:	be 01       	movw	r22, r28
    }
 6a0:	f6 cf       	rjmp	.-20     	; 0x68e <string_from_flash+0xa>
}
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	1f 91       	pop	r17
 6a8:	0f 91       	pop	r16
 6aa:	08 95       	ret

000006ac <string_from_bool>:
}

//**************************[string_from_bool]********************************* 27.09.2015
void string_from_bool(void (*out)(uint8_t), uint8_t boolean) {

    if (boolean) {
 6ac:	66 23       	and	r22, r22
 6ae:	19 f0       	breq	.+6      	; 0x6b6 <string_from_bool+0xa>
        string_from_const(out,"true");
 6b0:	6d e1       	ldi	r22, 0x1D	; 29
 6b2:	71 e0       	ldi	r23, 0x01	; 1
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <string_from_bool+0xe>
    } else {
        string_from_const(out,"false");
 6b6:	67 e1       	ldi	r22, 0x17	; 23
 6b8:	71 e0       	ldi	r23, 0x01	; 1
 6ba:	e4 cf       	rjmp	.-56     	; 0x684 <string_from_flash>

000006bc <string_from_flash_length>:
    }
}

//**************************[string_from_flash_length]************************* 05.10.2015
void string_from_flash_length(void (*out)(uint8_t), const char *str,
  uint8_t length) {
 6bc:	ef 92       	push	r14
 6be:	ff 92       	push	r15
 6c0:	0f 93       	push	r16
 6c2:	1f 93       	push	r17
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
 6c8:	7c 01       	movw	r14, r24
 6ca:	cf ef       	ldi	r28, 0xFF	; 255
 6cc:	c4 0f       	add	r28, r20

    uint8_t temp_char;

    while (length--) {
 6ce:	fb 01       	movw	r30, r22
 6d0:	cf 3f       	cpi	r28, 0xFF	; 255
 6d2:	99 f0       	breq	.+38     	; 0x6fa <string_from_flash_length+0x3e>
        #ifdef pgm_read_byte_far
            temp_char = pgm_read_byte_far (str++);
        #else
            temp_char = pgm_read_byte (str++);
 6d4:	84 91       	lpm	r24, Z
 6d6:	8f 01       	movw	r16, r30
 6d8:	0f 5f       	subi	r16, 0xFF	; 255
 6da:	1f 4f       	sbci	r17, 0xFF	; 255
 6dc:	df ef       	ldi	r29, 0xFF	; 255
 6de:	dc 0f       	add	r29, r28
        #endif

        if (temp_char == 0) {
 6e0:	81 11       	cpse	r24, r1
 6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <string_from_flash_length+0x34>
            while (length--) {
 6e4:	c1 50       	subi	r28, 0x01	; 1
 6e6:	48 f0       	brcs	.+18     	; 0x6fa <string_from_flash_length+0x3e>
                out(' ');
 6e8:	80 e2       	ldi	r24, 0x20	; 32
 6ea:	f7 01       	movw	r30, r14
 6ec:	09 95       	icall
 6ee:	fa cf       	rjmp	.-12     	; 0x6e4 <string_from_flash_length+0x28>
            }
            return;
        }
        out(temp_char);
 6f0:	f7 01       	movw	r30, r14
 6f2:	09 95       	icall
 6f4:	f8 01       	movw	r30, r16
 6f6:	cd 2f       	mov	r28, r29
 6f8:	eb cf       	rjmp	.-42     	; 0x6d0 <string_from_flash_length+0x14>
    }
}
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	1f 91       	pop	r17
 700:	0f 91       	pop	r16
 702:	ff 90       	pop	r15
 704:	ef 90       	pop	r14
 706:	08 95       	ret

00000708 <robolib_string_print>:

//**************************[robolib_string_print]****************************** 27.09.2015
void robolib_string_print(void (*out)(uint8_t)) {
 708:	cf 93       	push	r28
 70a:	df 93       	push	r29
 70c:	ec 01       	movw	r28, r24

    string_from_const(out, "string:"                                   "\r\n");
 70e:	6d e0       	ldi	r22, 0x0D	; 13
 710:	71 e0       	ldi	r23, 0x01	; 1
 712:	b8 df       	rcall	.-144    	; 0x684 <string_from_flash>

    string_from_const(out, "  [empty]"                                 "\r\n");
 714:	61 e0       	ldi	r22, 0x01	; 1
 716:	71 e0       	ldi	r23, 0x01	; 1
 718:	ce 01       	movw	r24, r28
 71a:	b4 df       	rcall	.-152    	; 0x684 <string_from_flash>

    string_from_const(out,                                             "\r\n");
 71c:	6e ef       	ldi	r22, 0xFE	; 254
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	ce 01       	movw	r24, r28
}
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28

    string_from_const(out, "string:"                                   "\r\n");

    string_from_const(out, "  [empty]"                                 "\r\n");

    string_from_const(out,                                             "\r\n");
 726:	ae cf       	rjmp	.-164    	; 0x684 <string_from_flash>

00000728 <robolib_string_print_compiled>:
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	ec 01       	movw	r28, r24
 72e:	62 ed       	ldi	r22, 0xD2	; 210
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	a8 df       	rcall	.-176    	; 0x684 <string_from_flash>
 734:	66 ec       	ldi	r22, 0xC6	; 198
 736:	70 e0       	ldi	r23, 0x00	; 0
 738:	ce 01       	movw	r24, r28
 73a:	a4 df       	rcall	.-184    	; 0x684 <string_from_flash>
 73c:	63 ec       	ldi	r22, 0xC3	; 195
 73e:	70 e0       	ldi	r23, 0x00	; 0
 740:	ce 01       	movw	r24, r28
 742:	df 91       	pop	r29
 744:	cf 91       	pop	r28
 746:	9e cf       	rjmp	.-196    	; 0x684 <string_from_flash>

00000748 <main>:
    }

}

//**************************[main]*********************************************
int main (void) {
 748:	cf 93       	push	r28
 74a:	df 93       	push	r29
 74c:	00 d0       	rcall	.+0      	; 0x74e <main+0x6>
 74e:	cd b7       	in	r28, 0x3d	; 61
 750:	de b7       	in	r29, 0x3e	; 62

    // initialize hardware
    init_hardware();
 752:	f8 dc       	rcall	.-1552   	; 0x144 <init_hardware>

    //ToDo: modus aus und in EEPROM schreiben
     uint8_t modus = 1;
     blink_multicolored_alternating();
 754:	f7 dd       	rcall	.-1042   	; 0x344 <blink_multicolored_alternating>
     led_clearAll();
 756:	04 dd       	rcall	.-1528   	; 0x160 <led_clearAll>
     uint8_t error_count_team1 = 0;
 758:	1a 82       	std	Y+2, r1	; 0x02
     uint8_t error_count_team2 = 0;
 75a:	19 82       	std	Y+1, r1	; 0x01

    // initialize hardware
    init_hardware();

    //ToDo: modus aus und in EEPROM schreiben
     uint8_t modus = 1;
 75c:	11 e0       	ldi	r17, 0x01	; 1
    //grüne LED leuchtet für Team 2

    while (1)
    {
        //liest aktuelle Zustände der Knöpfe
        get_buttonState();
 75e:	09 dd       	rcall	.-1518   	; 0x172 <get_buttonState>

        //großer Knopf für Moduswechsel
        if (buttons.big_flank_up)
 760:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_edata+0x3>
 764:	88 23       	and	r24, r24
 766:	a9 f1       	breq	.+106    	; 0x7d2 <main+0x8a>
            modus++;
 768:	1f 5f       	subi	r17, 0xFF	; 255
        if (modus >3)
 76a:	14 30       	cpi	r17, 0x04	; 4
 76c:	70 f5       	brcc	.+92     	; 0x7ca <main+0x82>
            modus=1;

        // wenn der Modus geswitched wird, starten alle Lampen ausgeschaltet
        // und beide Fehlerzähler werden zurückgesetzt
        if (buttons.big_flank_up) {
            led_clearAll();
 76e:	f8 dc       	rcall	.-1552   	; 0x160 <led_clearAll>
            error_count_team1 = 0;
 770:	1a 82       	std	Y+2, r1	; 0x02
            error_count_team2 = 0;
 772:	19 82       	std	Y+1, r1	; 0x01

            switch (modus) {
 774:	12 30       	cpi	r17, 0x02	; 2
 776:	39 f0       	breq	.+14     	; 0x786 <main+0x3e>
 778:	13 30       	cpi	r17, 0x03	; 3
 77a:	39 f0       	breq	.+14     	; 0x78a <main+0x42>
 77c:	11 30       	cpi	r17, 0x01	; 1
 77e:	39 f4       	brne	.+14     	; 0x78e <main+0x46>
                case  1: blink_multicolored_alternating();
 780:	e1 dd       	rcall	.-1086   	; 0x344 <blink_multicolored_alternating>
                            break;
 782:	11 e0       	ldi	r17, 0x01	; 1
 784:	07 c0       	rjmp	.+14     	; 0x794 <main+0x4c>
                case  2: blink_green_alternating();
 786:	02 de       	rcall	.-1020   	; 0x38c <blink_green_alternating>
                            break;
 788:	05 c0       	rjmp	.+10     	; 0x794 <main+0x4c>
                case  3: blink_multicolored();
 78a:	1d de       	rcall	.-966    	; 0x3c6 <blink_multicolored>
                            break;
 78c:	03 c0       	rjmp	.+6      	; 0x794 <main+0x4c>
                default: led1_setGreen(1); led1_setBlue(1); led1_setRed(1);
 78e:	2a 9a       	sbi	0x05, 2	; 5
 790:	5d 9a       	sbi	0x0b, 5	; 11
 792:	29 9a       	sbi	0x05, 1	; 5
                            break;
            }
            led_clearAll();
 794:	e5 dc       	rcall	.-1590   	; 0x160 <led_clearAll>

        }

            switch (modus) {
 796:	12 30       	cpi	r17, 0x02	; 2
 798:	59 f0       	breq	.+22     	; 0x7b0 <main+0x68>
 79a:	13 30       	cpi	r17, 0x03	; 3
 79c:	59 f0       	breq	.+22     	; 0x7b4 <main+0x6c>
 79e:	11 30       	cpi	r17, 0x01	; 1
 7a0:	81 f4       	brne	.+32     	; 0x7c2 <main+0x7a>
                case  1: modus_1(error_team1, error_team2);
 7a2:	be 01       	movw	r22, r28
 7a4:	6f 5f       	subi	r22, 0xFF	; 255
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255
 7a8:	ce 01       	movw	r24, r28
 7aa:	02 96       	adiw	r24, 0x02	; 2
 7ac:	78 dd       	rcall	.-1296   	; 0x29e <modus_1>
 7ae:	d6 cf       	rjmp	.-84     	; 0x75c <main+0x14>
                            break;
                case  2: modus_2();
 7b0:	9b dd       	rcall	.-1226   	; 0x2e8 <modus_2>
                            break;
 7b2:	d5 cf       	rjmp	.-86     	; 0x75e <main+0x16>
                case  3: modus_3(error_team1, error_team2);
 7b4:	be 01       	movw	r22, r28
 7b6:	6f 5f       	subi	r22, 0xFF	; 255
 7b8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ba:	ce 01       	movw	r24, r28
 7bc:	02 96       	adiw	r24, 0x02	; 2
 7be:	a1 dd       	rcall	.-1214   	; 0x302 <modus_3>
                            break;
 7c0:	ce cf       	rjmp	.-100    	; 0x75e <main+0x16>
                default: led1_setGreen(1); led1_setBlue(1); led1_setRed(1);
 7c2:	2a 9a       	sbi	0x05, 2	; 5
 7c4:	5d 9a       	sbi	0x0b, 5	; 11
 7c6:	29 9a       	sbi	0x05, 1	; 5
                            break;
 7c8:	ca cf       	rjmp	.-108    	; 0x75e <main+0x16>
            modus=1;

        // wenn der Modus geswitched wird, starten alle Lampen ausgeschaltet
        // und beide Fehlerzähler werden zurückgesetzt
        if (buttons.big_flank_up) {
            led_clearAll();
 7ca:	ca dc       	rcall	.-1644   	; 0x160 <led_clearAll>
            error_count_team1 = 0;
 7cc:	1a 82       	std	Y+2, r1	; 0x02
            error_count_team2 = 0;
 7ce:	19 82       	std	Y+1, r1	; 0x01
 7d0:	d7 cf       	rjmp	.-82     	; 0x780 <main+0x38>
        get_buttonState();

        //großer Knopf für Moduswechsel
        if (buttons.big_flank_up)
            modus++;
        if (modus >3)
 7d2:	14 30       	cpi	r17, 0x04	; 4
 7d4:	30 f7       	brcc	.-52     	; 0x7a2 <main+0x5a>
 7d6:	df cf       	rjmp	.-66     	; 0x796 <main+0x4e>

000007d8 <__udivmodhi4>:
 7d8:	aa 1b       	sub	r26, r26
 7da:	bb 1b       	sub	r27, r27
 7dc:	51 e1       	ldi	r21, 0x11	; 17
 7de:	07 c0       	rjmp	.+14     	; 0x7ee <__udivmodhi4_ep>

000007e0 <__udivmodhi4_loop>:
 7e0:	aa 1f       	adc	r26, r26
 7e2:	bb 1f       	adc	r27, r27
 7e4:	a6 17       	cp	r26, r22
 7e6:	b7 07       	cpc	r27, r23
 7e8:	10 f0       	brcs	.+4      	; 0x7ee <__udivmodhi4_ep>
 7ea:	a6 1b       	sub	r26, r22
 7ec:	b7 0b       	sbc	r27, r23

000007ee <__udivmodhi4_ep>:
 7ee:	88 1f       	adc	r24, r24
 7f0:	99 1f       	adc	r25, r25
 7f2:	5a 95       	dec	r21
 7f4:	a9 f7       	brne	.-22     	; 0x7e0 <__udivmodhi4_loop>
 7f6:	80 95       	com	r24
 7f8:	90 95       	com	r25
 7fa:	bc 01       	movw	r22, r24
 7fc:	cd 01       	movw	r24, r26
 7fe:	08 95       	ret

00000800 <_exit>:
 800:	f8 94       	cli

00000802 <__stop_program>:
 802:	ff cf       	rjmp	.-2      	; 0x802 <__stop_program>
